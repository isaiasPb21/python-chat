from threading import *   
from datetime import *
from tkinter import *
from tkinter import messagebox  
import socket
import time
import random

class Aplicacao ():
    def __init__(self, master=None):        
        self.fontePadrao = ("Verdana", "13")

        alfabeto = ['ª','a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z','â','ã','é','ç','õ','0','1','2','3','4','5','6','7','8','9',' ',',','.','+','-','*',':','/','\\','!','@','#','$','%','&','(',')']

        # ********************************************************************************************************************** FUNÇÕES
        def horario():
            horario = datetime.now()
            horario = horario.strftime('%H:%M %Y %S')
            return horario
        # ************************************************
        # ************************************************
        def calcAlea (fim=1000):                 
            aleatorio = random.randint(0,fim)
            return aleatorio

        def calcPrimo (num):                      
            acumulador = 0
            for n in range(1,num+1,1):
                aux = (num % n)
                if aux == 0:
                    acumulador += 1
                if (aux ==0) and (n != 1) and (n !=num):
                    return calcPrimo(num+1)
            if acumulador <= 2:
                return num
        
        numP = calcPrimo(calcAlea())     
        numQ = calcPrimo(calcAlea())

        feedN = ((numP-1) * (numQ-1))                   

        minha_chaveE = calcPrimo(calcAlea(feedN-200))
        minha_chaveN = (numP * numQ)

        chaves = (minha_chaveE, minha_chaveN)

        minha_chaveD = 0
        x=0
        while x < minha_chaveN:
            r = (x * minha_chaveE) % feedN
            if r == 1:
                minha_chaveD = x
                break
            x += 1

        print('P {} * Q {} * N {} * D {} * E {}'.format(numP, numQ, minha_chaveN, minha_chaveD, minha_chaveE))
        # ************************************************
        
        # ************************************************
        # ************************************************
        # ************************************************
        def avancar(event):
            print('Avancar')
            self.frameUm_nome["bg"] = "yellow"
            self.frameUm_nome.pack_forget()
            
            self.frameNome = Frame(master)                                                   # Frame Show his name
            self.frameNome.pack(side=TOP, fill="both")
            
            self.lbNomeOutro = Label(self.frameNome, text="Nome Outro")
            self.lbNomeOutro.pack(fill=X, pady=5)

            self.frameShowMessage = Frame(master, bg="yellow", relief=FLAT)             # Show Message
            self.frameShowMessage.pack(side=TOP, fill="both")

            #
            def enviarMensagens(event):
                
                print('Enviando')
                   
                ip = '192.168.15.9'
                port = 2121
                add = (ip, port)
           
                clientSocket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
                clientSocket.connect(add)

                         # Chaves
                outro_chaveE = 71
                outro_chaveN = 1073
            
                # Mensagem

                x = self.message.get().lower()
                print(x)
                
                # Pré Cifragem   
                preCodificadoEnvio = []      
                codificadoRsaEnvio = []
                codificadoRsaStringEnvio = []
                
                for i in x:
                    aux3 = alfabeto.index(i) * 10
                    preCodificadoEnvio.append(aux3)

                # Cifragem
                for i in preCodificadoEnvio:
                    aux4 = (i ** outro_chaveE) % outro_chaveN
                    codificadoRsaEnvio.append(aux4)
                for i in codificadoRsaEnvio:
                    aux5 = str(i)
                    codificadoRsaStringEnvio.append(aux5)
          
                codificadoRsaEnvio = '_'.join(codificadoRsaStringEnvio)  

 
                print("Enviando ... ")
                clientSocket.sendto(codificadoRsaEnvio.encode(), (ip, port))
                print("Enviado")
                self.message.delete(0, END)
                
                labelMessage = Label(frame, text=x, anchor=E, wraplength=200, bg="darkgray", width=63)
                labelMessage.pack(fill="both", padx=5, pady=10, ipadx=5, ipady=10)
                self.message.delete(0, END)
                #labelMessage2 = Label(frame, text=x, anchor=E, wraplength=200, bg="pink", width=63)
                #labelMessage2.pack(fill="both", padx=5, pady=10, ipadx=5, ipady=10)
         
            
            def myfunction(event):
                canvas.configure(scrollregion=canvas.bbox("all"),width=550,height=470)

            myframe=Frame(root,relief=FLAT)
            myframe.pack()

            canvas=Canvas(myframe,width=550,height=470)
            frame=Frame(canvas)
            myscrollbar=Scrollbar(myframe,orient="vertical",command=canvas.yview)
            canvas.configure(yscrollcommand=myscrollbar.set)

            myscrollbar.pack(side="right",fill="y")
            canvas.pack(side="left")
            canvas.create_window((0,0),window=frame,anchor=NW)
            frame.bind("<Configure>",myfunction)
#

        


            self.labelMessage = Label(self.frameShowMessage, text="Sessão de chat criptografado ponta a ponta", wraplength=250, bg="orange")
            self.labelMessage.pack(fill=X, padx=5, pady=10, ipadx=5, ipady=10)

            self.frameShowInput = Frame(master, bg="darkgray")                         # Show Input 
            self.frameShowInput.pack(side=BOTTOM, fill="both")

            self.message = Entry(self.frameShowInput, borderwidth=0, insertbackground="lightgray", bg="darkgray")
            self.message.focus_set()
            self.message.bind("<Return>", enviarMensagens)
            self.message.pack(fill=X, padx=20, pady=10)
        # ************************************************
        # Nome
        self.frameUm_nome = Frame(master, bg="lightgray")                      # Frame M                                                                                                              
        self.frameUm_nome.pack(fill="both", pady=250)


        self.lb1 = Label(self.frameUm_nome, text = "Open : "+ horario() + ' s', anchor=W, fg="#000").pack(fill=X)

        self.lb2 = Label(self.frameUm_nome, text = "Nome : ", anchor=W, fg="#000").pack(fill=X, padx=150)
        
        self.ed2 = Entry(self.frameUm_nome, width=30, borderwidth=0, insertbackground="lightgray", bg="lightgray", fg="#000")
        self.ed2.focus_set()
        self.ed2.bind("<Return>", avancar)
        self.ed2.pack(pady=5)





root = Tk()
root.geometry("550x620+250+80")
root.configure(background="#a0a0a0")
Aplicacao(root)
root.mainloop()  
