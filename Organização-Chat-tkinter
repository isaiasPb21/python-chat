from threading import *   
from datetime import *
from tkinter import *
import socket
import time



class Aplicacao ():
    def __init__(self, master=None):        
        self.fontePadrao = ("Verdana", "13")
        # ********************************************************************************************************************************* 
        alfabeto = ['ª','a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z','0','1','2','3','4','5','6','7','8','9',' ',',','.','+','-','*','/','\\','!','@','#','$','%','&','(',')']

        # *********************************************************************************************************************************     
        def ir():
            pass

        # *********************************************************************************************************************************        
        def recebeMensagem ():
            
            host = '192.168.15.8'
            port = 2121
            add = (host, port)

            serv_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            serv_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)

            serv_socket.bind(add)
            serv_socket.listen(10)

            while True:
                con, cliente = serv_socket.accept()
                recebe = con.recv(2024)
                recebe = recebe.decode()
                recebe = recebe.split('_')

                chaveN = 1073
                chaveD = 1079

                recebeInt = []
                codificadoRsaRecebimento = []
                preCodificadoRecebimento = []

                print(recebe)  #
                
                # -- Transformando a variavel recebe(c) em Inteiros
                for i in  recebe:
                    aux0 = int(i)
                    recebeInt.append(aux0)         
                    print(recebeInt)  #                        
                  
                # -- Decodificacao
                for i in recebeInt:
                    aux1 = (i ** chaveD) % chaveN
                    codificadoRsaRecebimento.append(aux1)
                    print(codificadoRsaRecebimento)  #
                     
                # -- des pré Codificação
                for i in codificadoRsaRecebimento:
                    aux2 = alfabeto[i // 10]
                    preCodificadoRecebimento.append(aux2)
                    print(preCodificadoRecebimento)   #

                # -- Reajuntando a mensagem
                mensagemOriginal = ''.join(preCodificadoRecebimento)
                print('Mensagem Original : ', mensagemOriginal)   #

        # ********************************************************************************************************************************* 
        # ********************************************************************************************************************************* 
        # ********************************************************************************************************************************* 

        funcao1 = Thread (target=recebeMensagem) 
        funcao1.start()

        # ********************************************************************************************************************************* 
        def curSelect(event):            
            auxiliar=self.listB.curselection()
            selection= auxiliar[0]
            print(selection)
            if (selection < 3):
               pass
            else :
                picked = self.listB.get(selection)
                print(picked)                                                                   #
                print('indice : ', selection, 'patente : ', picked)      #         

                tela_label_entry()        
                self.frameM.pack_forget()

        # ********************************************************************************************************************************* 
        def tela_label_entry():           
            self.l1 = Label(self.frameMB, anchor=W, text='Open : ' + horario, bg="black", fg="red").pack(fill=X)
            self.l2 = Label(self.frameMB, anchor=W, text=" >> Ola, seja bem vindo Senhor", bg="black", fg="red").pack(fill=X)
            self.l3 = Label(self.frameMB, text=" >> Deseja prosseguir ? [S / N]", bg="black", fg="red").pack(side=LEFT)

            self.e = Entry(self.frameMB, width=2, bg="#000", fg="red")
            self.e.bind("<Return>", avancarTela)
            self.e.focus_set()
            self.e.pack(side=LEFT)  

        def avancarTela(event):
            self.x = self.e.get()
            if (self.x[0] == 'S') or (self.x[0] == 's'):
                 print('Prosseguindo ... ')
                 criaWidgetsEnvio()
            else:
                 print('Fechando ... ')
                 master.destroy()

        def criaWidgetsEnvio():
            root.geometry("400x400+250+100")
            self.frameMB
           
        # ********************************************************************************************************************************* 

        # ********************************************************************************************************************************* 
   
        
        # ********************************************************************************************************************************* 
        self.menu = Menu(master)                                                                                                                 # Criar Barra de Menu 

        self.menuArquivos = Menu(self.menu)                                                                                              #Criar "Botão"                                                                                                
        self.menuArquivos.add_command(label="Inserir Chave", command=ir)                                     # adicionar comandos ao Menu
        self.menuArquivos.add_command(label="Salvar")                                                                          #adicionar comandos ao Menu 
        self.menuArquivos.add_separator()                                                                                                  # adicionar separador ao menu
        self.menuArquivos.add_command(label="Fechar")                                                                         # adicionar comando ao Menu
        self.menu.add_cascade(label="Arquivos", menu=self.menuArquivos)                                       # Criar Botão no menu

        self.menuConfiguracoes = Menu(self.menu)                                  
        self.menuConfiguracoes.add_command(label="Criptografia    ")
        self.menuConfiguracoes.add_command(label="Detalhes          ")
        self.menu.add_cascade(label="Modus Operandi", menu=self.menuConfiguracoes)
        
        master.config(menu=self.menu)
        # *********************************************************************************************************************************
        self.frameM = Frame(master, bg="black", pady=12, padx=10)                                                                                                                          
        self.frameM.pack(side=TOP, fill="both")
        # *********************************************************************************************************************************
        self.frameMB = Frame(master, bg="blue", pady=12, padx=10)                                  
        self.frameMB["relief"] = RIDGE                                                                                                   
        self.frameMB["borderwidth"] = 2                                                                                                
        self.frameMB.pack(fill="both")        
        # *********************************************************************************************************************************                
        self.listB = Listbox(self.frameM, borderwidth = 0, highlightthickness = 0, selectbackground="#f5f5f5", bg="#000", fg="red", width=40, height=15, selectmode=SINGLE)
        self.listB.bind('<<ListboxSelect>>', curSelect)
        self.listB.pack(side=LEFT)

        itensListB = ['General','1', '2', '3', '4', '5', '6', '7', '8', '9']

        self.listB.insert(0, ' * Selecione sua patente : ')
        self.listB.insert(1, ' _________________________')
        self.listB.insert(2, '  ')
        
        for i in itensListB :
            self.listB.insert(END, i)
        # ********************************************************************************************************************************* 
        horario = datetime.now()
        horario = horario.strftime('%H:%M %Y %S')
        # ********************************************************************************************************************************* 
       



        # *********************************************************************************************************************************  
        '''self.listB.insert(0, 'Open : ' + horario)
        self.listB.insert(END, '')
        self.listB.insert(END, '>')'''


        
     

root = Tk()
root.geometry("550x550+250+100")
root.configure(background="black")
Aplicacao(root)
root.mainloop()
