from threading import *   
from datetime import *
from tkinter import *
import socket
import time



class Aplicacao ():
    def __init__(self, master=None):        
        self.fontePadrao = ("Verdana", "13")
        # ********************************************************************************************************************************* 
        alfabeto = ['ª','a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z','0','1','2','3','4','5','6','7','8','9',' ',',','.','+','-','*','/','\\','!','@','#','$','%','&','(',')']

        # *********************************************************************************************************************************     
        def ir():
            pass
        # *********************************************************************************************************************************        
        # *********************************************************************************************************************************        
      
        # *********************************************************************************************************************************        
        def recebeMensagem ():
            
            host = '192.168.15.8'
            port = 2121
            add = (host, port)

            serv_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            serv_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)

            serv_socket.bind(add)
            serv_socket.listen(10)

            while True:
                con, cliente = serv_socket.accept()
                recebe = con.recv(2024)
                recebe = recebe.decode()
                recebe = recebe.split('_')

                chaveN = 1073
                chaveD = 1079

                recebeInt = []
                codificadoRsaRecebimento = []
                preCodificadoRecebimento = []

                print(recebe)  #
                
                # -- Transformando a variavel recebe(c) em Inteiros
                for i in  recebe:
                    aux0 = int(i)
                    recebeInt.append(aux0)         
                    print(recebeInt)  #                        
                  
                # -- Decodificacao
                for i in recebeInt:
                    aux1 = (i ** chaveD) % chaveN
                    codificadoRsaRecebimento.append(aux1)
                    print(codificadoRsaRecebimento)  #
                     
                # -- des pré Codificação
                for i in codificadoRsaRecebimento:
                    aux2 = alfabeto[i // 10]
                    preCodificadoRecebimento.append(aux2)
                    print(preCodificadoRecebimento)   #

                # -- Reajuntando a mensagem
                mensagemOriginal = ''.join(preCodificadoRecebimento)
                print('Mensagem Original : ', mensagemOriginal)   #

        # ********************************************************************************************************************************* 
        funcao1 = Thread (target=recebeMensagem) 
        funcao1.start()
        # ********************************************************************************************************************************* 
        def enviarMensagens():
           
           ip = '192.168.15.3'
           port = 2121
           add = (ip, port)
           
           clientSocket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
           clientSocket.connect(add)

           chaveE = 71
           chaveN = 1073

           x =  mensagem.get().lower()   
           x = list(x)
           
           # Pré Cifragem   
           preCodificadoEnvio = []      
           codificadoRsaEnvio = []
           codificadoRsaStringEnvio = []
           
           for i in x:
              aux3 = alfabeto.index(i) * 10
              preCodificadoEnvio.append(aux3)

           # Cifragem
           for i in preCodificadoEnvio:
              aux4 = (i ** chaveE) % chaveN
              codificadoRsaEnvio.append(aux4)

           for i in codificadoRsaEnvio:
              aux5 = str(i)
              codificadoRsaStringEnvio.append(aux5)
              
           codificadoRsaEnvio = '_'.join(codificadoRsaStringEnvio)    
           
           clientSocket.sendto(codificadoRsaEnvio.encode(), (ip, port))
           mensagem.delete(0, END)
           clientSocket.close()

        # ********************************************************************************************************************************* 



        # ********************************************************************************************************************************* 
        def curSelect(event):            
            auxiliar=self.listB.curselection()
            selection= auxiliar[0]
            print(selection)
            if (selection < 3):
               pass
            else :
                picked = self.listB.get(selection)
                print(picked)                                                                   #
                print('indice : ', selection, 'patente : ', picked)           #         

                tela_label_entry()        
                self.frameM.pack_forget()

        # ********************************************************************************************************************************* 
        # Passo - 1 -- envent '<Return>' -> função perguntaChave
        def tela_label_entry():           
            self.l1 = Label(self.frameMB, anchor=W, text='Open : ' + horario + ' s', bg="black", fg="red").pack(fill=X)
            self.l2 = Label(self.frameMB, anchor=W, text=" >> Ola, seja bem vindo Senhor", bg="black", fg="red").pack(fill=X)
            self.l3 = Label(self.frameMB, text=" >> Deseja prosseguir ? [S / N]", bg="black", fg="red").pack(side=LEFT)

            self.e = Entry(self.frameMB, width=2, bg="#000", fg="red")
            self.e.bind("<Return>", perguntaChave)
            self.e.focus_set()
            self.e.pack(side=LEFT)  

        # ********************************************************************************************************************************* 
        # Passo - 2 -- event '<Return>' -> função camposPreencherChave
        def perguntaChave(event):
            # --- --- --- --- --- --- --- --- --- 
            # Passo - 3 -- event '<Return>' -> função passarPara_e4
            def camposPreencherChave(event):
           
                self.x = ''
                self.x = self.e2.get()
                
                if (self.x[0] == 'S') or (self.x[0] == 's'):                                                 
                    self.l5 = Label(self.frameMBDK, anchor=W, text=">> Insira a chave pública : ")
                    self.l5.pack(side=LEFT, fill=X)
                    
                    self.e3 = Entry(self.frameMBDK, width=2, bg="yellow", fg="red")
                    self.e3.bind("<Return>", passarPara_e4)
                    self.e3.focus_set()
                    self.e3.pack(side=LEFT, fill=X)              
                else:
                    print('Gerar Chaves')
                    #gerarChaves()
                    
            # Passo - 4 -- event '<Return>' -> função chavesPublicas
            def passarPara_e4(event):                                                                      # Event -- focus_set() -> e4 (Entry 04) 

                # --- --- --- --- --- --- --- --- --- 
                # Return Chaves Públicas 
                def chavesPublicas(event):                                                                  # Setando chaves públicas
                    
                    chaveE = int(self.e3.get())
                    chaveN = int(self.e4.get())
                    print(chaveE)
                    print(chaveN)
                    # return                    
                                       
                self.l6 = Label(self.frameMBDKG, text=">> Insira a chave pública geral : ")
                self.l6.pack(side=LEFT, fill=X)
                
                self.e4 = Entry(self.frameMBDKG, width=2, bg="blue", fg="red")
                self.e4.bind("<Return>", chavesPublicas)
                self.e4.focus_set()
                self.e4.pack(side=LEFT)
                # --- --- --- --- --- --- --- --- ---
                
            self.x = self.e.get()                                                                                         # Obtedo valor de [S/N] -- Frame 1
            if (self.x[0] == 'S') or (self.x[0] == 's'):                                                         # Caso "Prosseguir" seja  [S]  
                
                 print('Prosseguindo ... ')
             
                 self.frameMBD = Frame(master, bg="orange", pady=12, padx=10) # Frame 2 -- Deseja inserir Chave
                 self.frameMBD.pack(side=TOP, fill="both")

                 self.frameMBDK = Frame(master, bg="yellow", pady=12, padx=10) # Frame 3 -- Chave Pública
                 self.frameMBDK.pack(side=TOP, fill="both")

                 self.frameMBDKG = Frame(master, bg="gray", pady=12, padx=10) # Frame 4 -- Chave Pública Geral
                 self.frameMBDKG.pack(side=TOP, fill="both")
                                 
                 self.l4 = Label(self.frameMBD, text=" >> Deseja inserir as chaves púlicas ? [S / N]", bg="black", fg="red").pack(side=LEFT)

                 self.e2 = Entry(self.frameMBD, width=2, bg="#000", fg="red")
                 self.e2.bind("<Return>", camposPreencherChave)
                 self.e2.focus_set()
                 self.e2.pack(side=LEFT)        
            
            else:                                                                                                                     # Caso "Prosseguir"  não seja  [S]  
                
                 print(' Saindo ... ')
                 master.destroy()
           
        # ********************************************************************************************************************************* 

        # ********************************************************************************************************************************* 
        
        # ********************************************************************************************************************************* 
        self.menu = Menu(master)                                                                                                                 #  

        self.menuArquivos = Menu(self.menu)                                                                                              #                                                                                                
        self.menuArquivos.add_command(label="Inserir Chave", command=ir)                                     
        self.menuArquivos.add_command(label="Salvar")                                                                          
        self.menuArquivos.add_separator()                                                                                                  
        self.menuArquivos.add_command(label="Fechar")                                                                         
        self.menu.add_cascade(label="Arquivos", menu=self.menuArquivos)                                      

        self.menuConfiguracoes = Menu(self.menu)                                  
        self.menuConfiguracoes.add_command(label="Criptografia    ")
        self.menuConfiguracoes.add_command(label="Detalhes          ")
        self.menu.add_cascade(label="Modus Operandi", menu=self.menuConfiguracoes)
        
        master.config(menu=self.menu)
        # *********************************************************************************************************************************
        self.frameM = Frame(master, bg="black", pady=12, padx=10)                                                                                                                          
        self.frameM.pack(side=TOP, fill="both")
        # *********************************************************************************************************************************
        self.frameMB = Frame(master, bg="blue", pady=12, padx=10)                                  
        self.frameMB["relief"] = RIDGE                                                                                                   
        self.frameMB["borderwidth"] = 2                                                                                                
        self.frameMB.pack(side=TOP, fill="both")        
        # *********************************************************************************************************************************                
        self.listB = Listbox(self.frameM, borderwidth = 0, highlightthickness = 0, selectbackground="#f5f5f5", bg="#000", fg="red", width=40, height=15, selectmode=SINGLE)
        self.listB.bind('<<ListboxSelect>>', curSelect)
        self.listB.pack(side=LEFT)

        itensListB = ['General','1', '2', '3', '4', '5', '6', '7', '8', '9']

        self.listB.insert(0, ' * Selecione sua patente : ')
        self.listB.insert(1, ' _________________________')
        self.listB.insert(2, '  ')
        
        for i in itensListB :
            self.listB.insert(END, i)
        # ********************************************************************************************************************************* 
        horario = datetime.now()
        horario = horario.strftime('%H:%M %Y %S')
        # ********************************************************************************************************************************* 
        # *********************************************************************************************************************************  
        '''self.listB.insert(0, 'Open : ' + horario)
        self.listB.insert(END, '')
        self.listB.insert(END, '>')'''


        
     

root = Tk()
root.geometry("550x550+250+100")
root.configure(background="black")
Aplicacao(root)
root.mainloop()

'''def criaWidgetsEnvio():
            root.geometry("400x400+250+100")
            self.frameMB.pack_forget()
            self.frameExibeMensagem = Frame(master).pack(side=TOP)
            self.frameEnviaMensagem = Frame(master).pack(side=BOTTOM)'''
