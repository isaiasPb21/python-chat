from threading import *   
from datetime import *
from tkinter import *
from tkinter import messagebox  
import socket
import time
import random

class Aplicacao ():
    def __init__(self, master=None):        
        self.fontePadrao = ("Verdana", "13")

        alfabeto = ['ª','a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z','â','ã','é','ç','õ','0','1','2','3','4','5','6','7','8','9',' ',',','.','+','-','*',':','/','\\','!','@','#','$','%','&','(',')']

        # ********************************************************************************************************************** FUNÇÕES
        def horario():
            horario = datetime.now()
            horario = horario.strftime('%H:%M %Y %S')
            return horario

        # ************************************************
        # ************************************************
        def calcAlea (fim=1000):                 
            aleatorio = random.randint(0,fim)
            return aleatorio

        def calcPrimo (num):                      
            acumulador = 0
            for n in range(1,num+1,1):
                aux = (num % n)
                if aux == 0:
                    acumulador += 1
                if (aux ==0) and (n != 1) and (n !=num):
                    return calcPrimo(num+1)
            if acumulador <= 2:
                return num
        
        numP = calcPrimo(calcAlea())     
        numQ = calcPrimo(calcAlea())

        feedN = ((numP-1) * (numQ-1))                   

        minha_chaveE = calcPrimo(calcAlea(feedN-200))
        minha_chaveN = (numP * numQ)

        chaves = (minha_chaveE, minha_chaveN)

        minha_chaveD = 0
        x=0
        while x < minha_chaveN:
            r = (x * minha_chaveE) % feedN
            if r == 1:
                minha_chaveD = x
                break
            x += 1

        print('P {} * Q {} * N {} * D {} * E {}'.format(numP, numQ, minha_chaveN, minha_chaveD, minha_chaveE))
        # ************************************************
       
        def recebeMensagem ():
            
            host = '192.168.15.5'
            port = 2121
            add = (host, port)

            serv_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            serv_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)

            serv_socket.bind(add)
            serv_socket.listen(10)
            
            while True:
                con, cliente = serv_socket.accept()
                recebe = con.recv(2024)
                recebe = recebe.decode()
                print('Mostrar Mensa') #
                print('Mensagem : ', recebe)
                
                recebe = recebe.split('_')

                recebeInt = []
                codificadoRsaRecebimento = []
                preCodificadoRecebimento = []
                
                # -- Transformando a variavel recebe(c) em Inteiros
                for i in  recebe:
                    aux0 = int(i)
                    recebeInt.append(aux0)                                       
                  
                # -- Decodificacao
                for i in recebeInt:
                    aux1 = (i ** minha_chaveD) % minha_chaveN
                    codificadoRsaRecebimento.append(aux1)

                # -- des pré Codificação
                for i in codificadoRsaRecebimento:
                    aux2 = alfabeto[i // 10]
                    preCodificadoRecebimento.append(aux2)

                # -- Reajuntando a mensagem
                mensagemOriginal = ''.join(preCodificadoRecebimento)
                print('Mensagem Original : ', mensagemOriginal)
                print('Mensagem Recebida')
                

                if (bool(recebe) is True):                    
                    self.yesOrNo = messagebox.askquestion("Message " + horario() ,"Shows ?")
                    if (self.yesOrNo == 'yes'):
                        print('Mensagem Original : ', mensagemOriginal)   #
                        
                        self.labelExibicao = Label(self.frameExibeMensagens, justify=LEFT, anchor=W, wraplength=370, text=mensagemOriginal)
                        self.labelExibicao.pack(ipady=5, padx=5, pady=5, fill="both")
                        self.labelHorario = Label(self.frameExibeMensagens,  anchor=E, text=horario())
                        self.labelHorario.pack(side=LEFT, padx=5, pady=2)                        
                        time.sleep(10)
                        
                        self.labelExibicao["text"] = "Apagando ..."
                        time.sleep(0.5)
                        
                        self.labelExibicao.pack_forget()
                        self.labelHorario.pack_forget()
                    else :
                        print('Mensagem não irá ser recebida !!')
                        
                print('Reset iniciando')
                recebeInt = []
                codificadoRsaRecebimento = []
                preCodificadoRecebimento = []
                mensagemOriginal = ''

        # ************************************************ 
        def enviarMensagens():

            print('Enviando')
                   
            ip = '192.168.15.6'
            port = 2121
            add = (ip, port)
           
            clientSocket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            clientSocket.connect(add)

            # Chaves
            outro_chaveE = int(self.ed2.get())
            outro_chaveN = int(self.ed3.get())
            
            # Mensagem
            x = self.patente.lower()
            x += ' '+':'+' '
            x += self.mensagem.get().lower()
            print(x)
            
            # Pré Cifragem   
            preCodificadoEnvio = []      
            codificadoRsaEnvio = []
            codificadoRsaStringEnvio = []
            
            for i in x:
                aux3 = alfabeto.index(i) * 10
                preCodificadoEnvio.append(aux3)

            # Cifragem
            for i in preCodificadoEnvio:
                aux4 = (i ** outro_chaveE) % outro_chaveN
                codificadoRsaEnvio.append(aux4)
            for i in codificadoRsaEnvio:
                aux5 = str(i)
                codificadoRsaStringEnvio.append(aux5)
      
            codificadoRsaEnvio = '_'.join(codificadoRsaStringEnvio)  
 
            print("Enviando ... ")
            clientSocket.sendto(codificadoRsaEnvio.encode(), (ip, port))
            print("Enviado")
            self.mensagem.delete(0, END)

            preCodificadoEnvio.clear()               
            codificadoRsaStringEnvio.clear()
            codificadoRsaEnvio = ''
            
            clientSocket.close()
        # ************************************************        
        
        def avancar():
            outro_chaveE = self.ed2.get()
            outro_chaveN = self.ed3.get()
            
            aux = self.listB.curselection()
            aux = aux[0]
            if (aux < 7):
                print('menor')
            else:
                self.patente = self.listB.get(aux)
                print(self.patente)
            print('-')

            self.frameInput.pack_forget()
            self.listB.pack_forget()

            funcao1 = Thread (target=recebeMensagem)                                                # Inicia o Thread 
            funcao1.start()

            self.frameExibeMensagens = Frame(master, bg="orange")
            self.frameExibeMensagens.pack(fill="both")
            
            self.frameShowKeys["bg"] = "pink"
            self.frameShowKeys.pack(side=BOTTOM)
            
            self.mensagem = Entry(self.frameShowKeys, width=30)
            self.mensagem.focus_set()
            self.mensagem.pack()

            self.botaoEnviarMensagem = Button(self.frameShowKeys, text="Enviar", command=enviarMensagens)
            self.botaoEnviarMensagem.pack()                        

        # ******************************************************************************************************************** INTERFACE 
      

        self.frameM = Frame(master, bg="#000", pady=12, padx=10)                          # Frame M                                                                                                              
        self.frameM.pack(fill="both")
        self.frameInput = Frame(master, bg="#000", pady=12, padx=10)                        # Frame Input                                                                                                     
        self.frameInput.pack(fill="both")
        self.frameShowKeys = Frame(master, bg="#f00", pady=5, padx=10)             # Frame ShowKeys                                                                                                             
        self.frameShowKeys.pack(fill="both")
        # ¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬
        
        self.lb0 = Label(self.frameM, text = "Olá___", fg="#000", bg="#f00").pack(fill=X)
        self.lb1 = Label(self.frameM, text = "Open : "+ horario() + ' s', fg="#f00", bg="black").pack(side=LEFT)

        self.lb2 = Label(self.frameInput, text = "Chave pública do 2o [E] : ", anchor=W, fg="#000", bg="#f00").pack(fill=X)
        self.ed2 = Entry(self.frameInput, borderwidth=0, insertbackground="#f00", bg="#000")
        self.ed2.focus_set()
        self.ed2.pack(fill=X)
        
        self.lb3 = Label(self.frameInput, text = "Chave pública Geral do 2o [N] :  ", anchor=W, fg="#000", bg="#f00").pack(fill=X)
        self.ed3 = Entry(self.frameInput, borderwidth=0, insertbackground="#f00", bg="#000")
        self.ed3.pack(fill=X)

        self.bt_Avancar = Button(self.frameInput, text="Avancar", command=avancar, borderwidth=0, bg='#000', fg="#f00").pack(side=RIGHT, pady=5)
        # ¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬

        self.listB = Listbox(self.frameShowKeys, borderwidth = 0, highlightthickness = 0, selectbackground="#f5f5f5", bg="#000", fg="#f00", width=70, height=25, selectmode=SINGLE)
        self.listB.pack(side=LEFT)

        itensListB = ['Almirante','Almitante de Esquadra', 'Vice-Almirante', 'Contra-Almirante', 'Capitão de Mar e Guerra', 'Capitão de Fragata', 'Capitão de Corveta',
              'Capitão-Tenente', '1o Tenente', '2o Tenente', 'Guarda Marinha', 'Aspirante', 'Suboficial', '1o Sargento', '2o Sargento']

        self.listB.insert(END, 'SUAS CHAVES : ')        
        self.listB.insert(END, '')
        self.listB.insert(END, 'Chave [E] : ' + str(minha_chaveE))
        self.listB.insert(END, '')
        self.listB.insert(END, 'Chave [N] : ' + str(minha_chaveN))
        self.listB.insert(END, '')

        self.listB.insert(END, 'Selecione sua patente : ')
        
        for i in itensListB :
            self.listB.insert(END, i)
            
        print(minha_chaveE)
        print(minha_chaveN)
        print(minha_chaveD)
        # ¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬


        


root = Tk()
root.geometry("550x620+250+80")
root.configure(background="black")
Aplicacao(root)
root.mainloop()               
